import React, {PropTypes} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import TaskForm from './TaskForm';
import TaskList from './TaskList';
import * as actions from '../actions/taskActions';


class TaskBox extends React.Component {

  constructor(props) {
    super(props);
    this.state = {data:[]};


  }

  componentDidMount() {
    this.loadTasksFromServer();
    setInterval(this.loadTasksFromServer, this.props.pollInterval);
  }

  handleTaskSubmit(task) {
    let tasks = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    task.id = Date.now();
    let newTasks = tasks.concat([task]);
    this.setState({data: newTasks});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: task,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: tasks});
        if(err){
          //console.error(this.props.url, status, err.toString());
        }
      }.bind(this)
    });
  }

  // getInitialState() {
  //   return {data: []};
  // }

  loadTasksFromServer() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        if(err){
        //console.error(this.props.url, status, err.toString());
        }
      }.bind(this)
    });
  }

  render() {
    return (
      <div className="taskBox">
        <h1>stARt (Agile Results) Day List</h1>
        <TaskList data={this.state.data} />
        <TaskForm saveNewTask={props.actions.saveNewTask} task={props.task}/>

      </div>
    );
  }
}

export default TaskBox;

TaskBox.propTypes = {
  url: PropTypes.string.isRequired,
  actions: PropTypes.object.isRequired,
  task: PropTypes.object.isRequired

};